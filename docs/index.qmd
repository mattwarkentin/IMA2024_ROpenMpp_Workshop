---
title: "Hands-on with R and OpenM++ for Microsimulation"
subtitle: "9th World Congress of the International Microsimulation Association"
author: "Matt Warkentin, PhD (<matthew.warkentin@ucalgary.ca>)<br>Michael Wolfson, PhD (<mwolfson@uottawa.ca>)"
date: 2024-01-08
format: 
  revealjs:
    logo: assets/UC-vert-rgb.png
    theme: [default, custom.scss]
    title-slide-attributes: 
      data-background-image: 'https://images.unsplash.com/photo-1582778959124-88d5fd4fafa9?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
    code-link: true
    code-line-numbers: false
    self-contained: false
    slide-number: c
engine: knitr
execute: 
  echo: true
  warning: false
  error: false
---

```{r setup, includes=FALSE, echo=FALSE}
library(tidyverse)
library(glue)
library(here)
library(fontawesome)
library(htmltools)
```

## Who are we? {.smaller}

:::: {.columns}

::: {.column width="50%"}
- __Name:__ Matt Warkentin

- __Living:__ Calgary, Alberta, Canada

- __Education:__
    + BSc, Medical Sciences, Brock University
    + MSc, Epidemiology, Brock University
    + PhD, Molecular Epidemiology, University of Toronto
    + Postdoc, Dept. of Oncology, University of Calgary
:::

::: {.column width="50%"}
- __Name:__ Michael Wolfson

- __Living:__ Ottawa, Ontario, Canada

- __Education:__
    + BSc, Mathematics, Computer Science, Economics, University of Toronto
    + PhD, Economics, Cambridge University
    + Professor (nominally retired), University of Ottawa
:::

::::

## Relevant Disclosures

- __Matt Warkentin__: None to declare

- __Michael Wolfson__: Managed development of ModGen at Statistics Canada; Funded much of the development of OpenM++ from various research grants at University of Ottawa

## `r fa('broom')` Housekeeping

- Those wishing to be __active__ workshop participants will require a __user name__ and __password__ to connect to the cloud instance of OpenM++
    + Please come see us if you don't yet have this information

- Passive participants, please feel free follow along, ask questions, and interact with the workshop team

- Ask questions!

- Ask questions!

- Ask questions!

## `r fa('list-check')` Agenda

1. Brief history of OpenM++

2. Introduction to the OpenM++ API

3. Wrapping an API in R
    + Including some _tricks-of-the-trade_

4. Wrapping the OpenM++ API
    + Introduction to `{oncosimx}`

5. Hands-on examples

6. Concluding remarks

## What we hope to achieve?

1. Provide contextual background information on the history, design considerations, and features of OpenM++

1. Provide insights into how the OpenM++ API works and how it can work for YOU

1. Provide some _"tricks-of-the-trade"_ for how to effectively wrap stateful APIs into seamless R packages

1. Provide _"hands on"_ examples of how this looks and feels when it all comes together

# Brief history of OpenM++ {background-color='#ffe57b'}

## What is OpenM++

> OpenM++ is an open-source platform to develop, use, and deploy micro-simulation or agent-based models. __OpenM++ was designed to enable non-programmers to develop a range of models spanning simple to highly complex.__

- Primarily written in C and C++

- Can install and run on Mac, Windows, and Linux

- Carefully designed and constructed to be the backward compatible _heir_ to __ModGen__

## Why supercede ModGen?

> Modgen was designed to facilitate microsimulation model programming. Its purpose is to remove as many obstacles to microsimulation model creation as possible.

- ModGen was originally developed by Statistics Canada for its growing set of large and complex microsimulation models

- Time had come for a transition to an open-source version, one that works in multiple environments (not only Windows), works smoothly with contemporary cloud services, and can exploit massive parallelism

::: footer
<https://www.statcan.gc.ca/en/microsimulation/modgen/new/introduction/introduction>
:::

## What is OpenM++

- __Important point of distinction__:
    + OpenM++ the software/compiler
    + OpenM++ the microsimulation models written therein
    
- We focus on the latter, microsim models written in OpenM++

- OpenM++ is a __domain-specific language__ (DSL) that extends C++
    + Provides extensions that enable simple to complex microsimulation models to be written with about _one-fifth_ as many lines of code...

## Why OpenM++: General features

- __Open source__: OpenM++ and all components are licensed under the very broad MIT license

- __Cross-platform__: Model development and use on Windows, Linux, or MacOS

- __Standards-based__: Uses industry standard formats and technologies

- __Zero-footprint__: File-based installation requires no elevation of privileges

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Model developer features

- __High-level language__: Model types, parameters, entities, events, tables, etc. are specified using a compact domain-specific language targeted to microsimulation

- __Scalable complexity__: From simple 'toy' models to highly complex models

- __Modularity__: New events and processes can be added to a model in a new module, often with little or no modification to existing modules.

- Continuous or discrete time, or a mixture.

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Model developer features

- __Supports multiple versions__: Multiple OpenM++ versions can be installed and a single environment variable used to choose among them

- __Result compare__: Supports rapid comparison of all model outputs during incremental model development

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Computational features

- __Scalable computation__: Designed to scale linearly with population size or replicates when possible, N log N scaling for typical interacting populations

- __Grid-enabled, cloud-enabled__: Supports MPI for multi-processing to distribute execution of replicates to a small or large computational grid or to the cloud, with automatic result assembly

- __Multi-threaded__: Supports multi-threading for parallel execution of replicates on desktop or server

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Computational features

- __On-the-fly tabulation__: Tables are computed during the simulation, eliminating the need to output voluminous microdata for subsequent tabulation

- __Computationally efficient__: The model specification is transformed to C++ which is processed by an optimizing C++ compiler to produce a highly efficient executable program

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Usability features

- __Generated UI__: A model-specific UI is generated from the model specification

- __Browser-based UI__: The UI requires only a browser, and runs on almost any modern browser

- __Cloud-enabled__: Models can be deployed to a cloud and accessed remotely over the web, from a browser

- __Multilingual support__: For UI and for model, with real-time language switching

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Analyst features

- __Continuous time tabulation__: Powerful but easy to use language constructs to tabulate time-in-state, empirical hazards, transitions counts, state changes, etc.

- __Replicate support__: All tables can have underlying replicate simulations to assess the uncertainty of any cell of any output table. Statistical measures of uncertainty are computed for all cells of all tables

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## Why OpenM++: Analyst features

- __Import/export__: Models and runs can be moved between databases, or to standard formats for upstream preparation of inputs or for downstream analysis of outputs

- __Dynamic run control__: A computational grid can process runs dynamically to enable whole-model estimation or calibration, with a controlling script reading run results and preparing new runs for execution

- __Automation__: Models can be controlled by scripts, _e.g._, Python or R

::: footer
`r fa('link')` <https://openmpp.org/wiki/openmpp-wiki.html>
:::

## OpenM++: Workshop focus

- This workshop will primarily focus on the "analysts" perspective for what the benefits are of using OpenM++

> Automation: Models can be controlled by scripts, e.g., Python or R.

- How can we do this? 

- Why would we do this?

- What are the benefits?

## The Setup

- You developed a microsimulation model in OpenM++. You can control the simulation using several (or many many) parameters and run the simulation to get output tables.
    + I come from the oncology world, so my models are cancer-focused, but yours might be finance, pensions, taxes, etc.

- You are like me, in that you __DO NOT__ like using graphical user interfaces (GUI) to configure and run models, because:
    + Lacks transparency
    + Lacks reproducibility
    + Does not scale well

## OpenM++ API

> The [OpenM++] model API provides programmatic access to scenario management, model inputs, model runs, and model outputs. It is implemented by the OpenM++ oms web service, which uses standard JSON to communicate with a controlling application.

`r fa('link')` [API Documentation](https://openmpp.org/wiki/openmpp-wiki.html#Oms-web-service-API)

- The OpenM++ API has over 100 _endpoints_ for querying, setting, and deleting data

```{r echo=FALSE, eval=FALSE}
library(rvest)
read_html('https://openmpp.org/wiki/openmpp-wiki.html#Oms-web-service-API') |> 
  html_elements('h4') |> 
  map_chr(html_text) |> 
  enframe(NULL, 'endpoint') |> 
  filter(str_detect(endpoint, 'GET|PUT|POST|PATCH|DELETE')) |> 
  distinct(endpoint) |> 
  separate_wider_regex(endpoint, c('method' = '[[:upper:]]+', 'endpoint' = '.*')) |> 
  mutate(
    endpoint = str_remove(endpoint, '\\(.*\\)'),
    across(everything(), str_squish),
    endpoint = str_to_sentence(endpoint)
  ) |> 
  reactable::reactable(
    groupBy = 'method'
  )
```

# Brief introduction to APIs {background-color='#ffe57b'}

## But, what is an API?

- Stands for _"Application Programming Interface"_
    + Is that helpful?
    
- In simple terms, it is a software for allowing two applications (client and server) to _"communicate"_ with each other

- The communication occurs using a well-defined and structured language (_i.e._, send requests, receive responses)

- Most modern APIs conform to so-called "__REST__" standards (_i.e._, a RESTful API)

## API Schematic

![](assets/diagram-what-is-an-api-postman-illustration.svg)

::: footer
<https://www.postman.com/what-is-an-api/>
:::

## What is a RESTful API?

- A versatile interface for sending and retrieving data through HTTP requests in JSON or other formats (e.g., XML, CSV, plain-text)

- REST (Representational State Transfer) APIs represent an example of these interfaces since they use the principles underpinning the REST architectural design when communicating between clients and servers. 

- This design includes predefined sets of different operations parameters available via standard HTTP methods such as GET, POST, PUT or DELETE while allowing scalability.

## RESTful API request methods

- There are five popular kinds of API request methods: GET, POST, PUT, PATCH, and DELETE

- __GET:__ retrieves information or data from a specified resource

- __POST:__ submits data to be processed to a specified resource

- __PUT:__ updates a specified resource with new data

- __DELETE:__ deletes a specified resource

- __PATCH:__ partially updates a specified resource

# Communicating with APIs from R {background-color='#ffe57b'}

## Building an API request in R

We will utilize the `httr2` package...

```{r}
library(httr2)
```

```r
resp <- 
  request('url goes here...') |> 
  req_method('GET') |>
  req_perform()
```

```r
resp_status(resp)
resp_status_desc(resp)
resp_body_json(resp)
```

- Request methods are prefixed with `req_*`

- Response methods are prefixed with `resp_*`

::: footer
<https://httr2.r-lib.org>
:::

## Simple R API: Motivational Quotes

Let's do a simple example in R using the `{httr2}` package...

```{r}
library(httr2)

resp <- 
  request("https://zenquotes.io/api/quotes") |> 
  req_method('GET') |>
  req_perform() 

resp_status(resp)
resp_status_desc(resp)
```

## Simple R API: Motivational Quotes

```{r message=TRUE}
print(resp)
```

```{r}
quotes <- resp_body_json(resp)

quotes[[1]]$q
```

```{r}
quotes[[2]]$q
```

## Simple R API: Motivational Quotes

But even the previous example is a bit verbose for repeated use. Let's wrap this API request into a modular function.

```{r}
get_quote <- function() {
  resp <- 
    request("https://zenquotes.io/api/quotes") |> 
    req_method('GET') |>
    req_perform() |> 
    resp_body_json()
  resp[[1]]$q
}

get_quote()
```

# __Basic idea__: obfuscate the technical debt for making API requests in R into modular user-friendly functions {background-color='#ffe57b'}

- Note: In the previous toy example, our API request:
    + Didn't send any data with the request
    + Didn't require user authentication

## A rich history of wrapping APIs...

![](assets/imports.png)

## Quick Recap

- We have briefly learned what APIs are and how we communicate with them

- We have learned how to wrap simple API requests into reusable R functions

- Next, we will step up in complexity to learn some more advanced techniques for wrapping APIs (e.g., OpenM++) that allows for more sophisticated conversations between the client and server

# `r fa('r-project')` R Tricks-of-the-trade {background-color='#ffe57b'}

Not only do we want to communicate with the OpenM++ API, but we want our R session to always be up-to-date with the API database in __real time__

## Object-oriented (OO) approach

- Traditionally, R uses the `S3` object-oriented system which is __functional__ by design
    
    + Objects have classes and functions act on classes
    
    + Generics and methods
    
- Other languages (_e.g._, Python) use a more traditional (encapsulated) OO system

   + Objects ARE instances of a class definition and methods/attributes BELONG to classes

## S3 OOS

- Generics are "general-purpose" functions that perform an action depending on what class of object it is presented with

- `print()`

- `summary()`

- There are many others

```{r echo=TRUE}
#| code-fold: true
print
```

## S3 OOS

```{r echo=TRUE}
print(mtcars)
```

```{r echo=TRUE}
print(lm(mpg ~ hp, mtcars))
```

## When to use S3? Basically always...

> S3 is R’s first and simplest OO system. S3 is informal and _ad hoc_, but there is a certain elegance in its minimalism: you can’t take away any part of it and still have a useful OO system. __For these reasons, you should use it, unless you have a compelling reason to do otherwise.__

- I think communicating with an API connected to a database is a compelling reason

::: footer
<https://adv-r.hadley.nz/s3.html#introduction-12>
:::

## R6 versus S3

From Advanced R (2e) by Hadley Wickham:

- R6 is a profoundly different OO system from S3 and S4 because it is built on encapsulated objects, rather than generic functions. Additionally R6 objects have reference semantics, which means that they can be modified in place.

- A generic is a regular function so it lives in the global namespace. An R6 method belongs to an object so it lives in a local namespace. This influences how we think about naming.

- R6’s reference semantics allow methods to simultaneously return a value and modify an object. This solves a painful problem called “threading state”.

::: footer
<https://adv-r.hadley.nz/oo-tradeoffs.html#s3-r6>
:::

## R6 Encapsulated OOS

> R6 is an implemention of encapsulated object-oriented programming for R, and is a simpler, faster, lighter-weight alternative to R’s built-in reference classes. This style of programming is also sometimes referred to as classical object-oriented programming.

```r
## Standard use of S3 system
action(object)
```

Compared to...

```r
## Standard use of R6 system
object$action()
object$field
```

::: footer
<https://r6.r-lib.org/index.html>
:::

## Dog example: S3 Approach

```{r}
bucky <- structure(
  list(
    name = 'Bucky',
    noise = 'bark',
    species = 'dog'
  ),
  class = 'Dog'
)
```

```{r}
# New S3 method for `print()`
print.Dog <- function(x) {
  cat(x$noise)
}
```

```{r}
print(bucky)
```

## Dog example: R6 approach

```{r}
library(R6)
```

```{r}
# Create an abstract Dog class
Dog <-
  R6Class(
    classname = 'Dog',
    public = list(
      name = NULL,
      species = 'dog',
      initialize = function(name) {
        self$name <- name
      },
      make_noise = function() cat('bark')
    )
  )
```

## Dog example: R6 approach

```{r}
bucky <- Dog$new('Bucky')
bucky
```

```{r}
bucky$species
```

```{r}
bucky$make_noise()
```

- With R6 OOS, attributes and methods BELONG to an object

## Active Bindings

From `?makeActiveBinding`

> `makeActiveBinding()` installs `fun` in environment `env` so that getting the value of `sym` calls `fun` with no arguments, and assigning to `sym` calls `fun` with one argument, the value to be assigned. This allows the implementation of things like `C` variables linked to `R` variables and variables linked to databases

## Active Bindings

- That isn't a very clear definition, so let me try...

- Active bindings __LOOK__ like standard R objects in your global/local environment, but:
    + When you __ACCESS__ the objects value it actually runs a function in the background
    + When you __ASSIGN__ to the object it runs a function with the assigned value passed as its only argument (_optionally_)

- __NOTE:__ Active bindings should be used sparingly, if at all. They are hard to reason about using standard R logic and should be avoided unless absolutely necessary

## Active Bindings

```{r}
f <- function(x) {
  if (missing(x)) return(cat('This runs'))
  cat('Or this runs...')
}

makeActiveBinding('example_binding', f, .GlobalEnv)
```

```{r}
example_binding
```

```{r}
example_binding <- 100
```

- Active bindings are a first-class feature in R6, so we typically don't use `makeActiveBinding` directly...

## How does this help us?

- This feature is useful because our models/data live in a database so active bindings allows us to create objects that always run functions in the background to communicate and stay _up-to-date_ with the server (i.e., OpenM++)

- If a user makes a change in the GUI, this needs to be reflected in REAL TIME in our active R session

- Example: when a user tries to access a model/scenario/run, a function is ran to retrieve these in real-time to ensure they're accurate and up-to-date

```r
# Real-time communication with API behind-the-scenes
model_run$important_table
```

# Example: `oncosimx` R package

Programmatic interface to OpenM++ and OncoSimX

## Main Classes

- When using `oncosimx`, you will interact with one (or many) of three specific classes

- `OncoSimXModel`
    + R6 class definition for one of the OncoSimX models

- `OncoSimXWorkset`
    + R6 class definition for a set of model input parameters

- `OncoSimXModelRun`
    + R6 class definition for a model run

## Additional Functions

- `get_models()`, `get_worksets()`, `get_model_runs()`

- `create_scenario()` / `create_workset()`

- `load_model()`, `load_workset()` / `load_scenario()`, `load_model_run()` / `load_run()`

- `delete_scenario()` / `delete_workset()`, `delete_run()`

Each of these functions is an API request to OpenM++ wrapped into a friendly helper function...

## {#schematic-id}

![](assets/illustrations/illustrations.001.jpeg){fig-align="center"}

## Design Considerations

- This is an _opinionated_ framework for programmatically interfacing with the OpenM++ API and the cloud-based OncoSimX models

- __Design principle__: abstract away the technical debt associated with calling the OpenM++ API from R; from the users perspective, it should _look and feel_ like a _"normal"_ R package

- Trying to achieve feature parity with the GUI

## First Hands-on Example: RiskPaths

> Being a model for the study of childlessness, the main event of RiskPaths is the first pregnancy (which is always assumed to lead to birth). Pregnancy can occur at any point in time after the 15th birthday, with risks changing by both age and union status. The underlying statistical models are piecewise constant hazard regressions. With respect to fertility this implies the assumption of a constant pregnancy risk for a given age group and union status.

- [RiskPaths: More Information](https://www.statcan.gc.ca/en/microsimulation/modgen/new/chap3/chap3-2#a1)

## First Hands-on Example: RiskPaths {.smaller}

- There are 7 configurable parameters (tables)

- Mortality
    + `CanDie`: Can a person die? (Yes or No)
    + `ProbMort`: Probability of death (by age)

- Fertility
    + `AgeBaselinePreg1`: Risk for first pregnancy (by age)
    + `UnionStatusPreg1`: Relative risk of union status on first pregnancy
    
- Unions
    + `AgeBaselineForm1`: Risk for first union formation (by age)
    + `UnionDurationBaseline`: Risk for union dissolution (by time)
    + `SeparationDurationBaseline`: Risk for 2nd union formation

::: footer
<https://www.statcan.gc.ca/en/microsimulation/modgen/new/chap3/chap3-2>
:::

# `r fa('hands')` Hands-on Example {background-color='#ffe57b'}

__RiskPaths__: A model for the study of childlessness

## OncoSim

> OncoSim is a free, web-based simulation tool that evaluates cancer control strategies. Combining data from the real world, expert opinion and the published literature, OncoSim projects health and economic outcomes, and attributes them to 19 risk factors, such as smoking and inadequate physical activity. It currently models four cancer sites (breast, colorectal, lung, and cervical) and related screening programs in detail, and provides high-level projections for 25 cancer sites

## Second Hands-on Example: OncoSim-AllCancers

> The OncoSim-All Cancers Model projects the incidence, deaths and healthcare costs of 25 cancers in Canada and attributes them to various risk factors.

### Helpful Links:

- [OncoSim fact sheets](https://www.partnershipagainstcancer.ca/tools/oncosim/fact-sheets/)

- [OncoSim-All Cancers fact sheet](https://s22457.pcdn.co/wp-content/uploads/2022/10/OncoSim-All-Cancers-fact-sheet-2022-EN.pdf)

- [OncoSim examples](https://www.partnershipagainstcancer.ca/tools/oncosim/related-resources/#allcancers)

# `r fa('hands')` Hands-on Example {background-color='#ffe57b'}

__OncoSim-All Cancers__: Projects the incidence, deaths, and healthcare costs of 25 cancers in Canada

## Closing remarks

- We learned (hopefully):
    + OpenM++ microsimulation platform
    + Brief introduction to APIs
    + Communication with OpenM++ API from R
    + Some advanced R techniques for real-time API connections

- The goal of this workshop was to be _illustrative_, not __prescriptive__. If you choose to use OpenM++ for your miscrosimulation needs, hopefully this workshop provided _food for thought_ about how best to interact with OpenM++ programmatically using R

## Helpful Resources

- [Wrapping APIs with httr2](https://httr2.r-lib.org/articles/wrapping-apis.html)

- [Why You Should (or Shouldn’t) Build an API Client](https://ropensci.org/blog/2022/06/16/publicize-api-client-yes-no/)

- [Introduction to R6](https://r6.r-lib.org/articles/Introduction.html)

- [OpenM++ Wiki](https://openmpp.org/wiki/openmpp-wiki.html)

- [oncosimx GitHub](https://github.com/oncology-outcomes/oncosimx)

Please feel free to get in touch with me after the workshop at the following email address: <matthew.warkentin@ucalgary.ca>

## `r fa('far fa-thumbs-up')` Acknowledgements

:::: {.columns}

::: {.column width="50%"}
- __OpenM++__
    + Steve Gribble
    + Anatoly Cherkassky

- __Statistics Canada__
    + Michael C. Wolfson
    + Rochelle Garner

- __CPAC__
    + Jean Yong
    + Roxanne Garaszczuk
:::

::: {.column width="50%"}
- __Brenner Lab/U of C__
    + Darren R. Brenner
    + Winson Cheung
    + John Hutchinson
    + Yibing Ruan
    + Rob Basmadjian
    + Mariet Stephen
    + Keaton Banik
:::

::::
